// <auto-generated />
using System;
using DataAccess.EFCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.EFCore.Migrations
{
    [DbContext(typeof(JdrContext))]
    [Migration("20230807121237_addIdentityTables")]
    partial class addIdentityTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Campagne", b =>
                {
                    b.Property<long>("PartieId")
                        .HasColumnType("bigint")
                        .HasColumnName("partieID");

                    b.Property<string>("Duree")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("duree");

                    b.Property<string>("Frequence")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("frequence");

                    b.HasKey("PartieId");

                    b.ToTable("Campagne", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Genre", b =>
                {
                    b.Property<short>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("genreID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("GenreId"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("libelle");

                    b.HasKey("GenreId")
                        .HasName("PK__Genre__3C5476A23ECF750A");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Joueur", b =>
                {
                    b.Property<long>("JoueurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("joueurID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JoueurId"));

                    b.Property<DateTime>("DateCreaCompte")
                        .HasColumnType("date")
                        .HasColumnName("dateCreaCompte");

                    b.Property<DateTime?>("DateNaiss")
                        .HasColumnType("date")
                        .HasColumnName("dateNaiss");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nom");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prenom");

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pseudo");

                    b.Property<string>("UrlAvatar")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("urlAvatar");

                    b.HasKey("JoueurId");

                    b.HasIndex(new[] { "Email" }, "UC_Joueur_email")
                        .IsUnique();

                    b.ToTable("Joueur", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Oneshot", b =>
                {
                    b.Property<long>("PartieId")
                        .HasColumnType("bigint")
                        .HasColumnName("partieID");

                    b.Property<byte>("NbSeances")
                        .HasColumnType("tinyint")
                        .HasColumnName("nbSeances");

                    b.HasKey("PartieId");

                    b.ToTable("Oneshot", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Partie", b =>
                {
                    b.Property<long>("PartieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("partieID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PartieId"));

                    b.Property<string>("Applis")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("applis");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<long>("MeneurId")
                        .HasColumnType("bigint")
                        .HasColumnName("meneurID");

                    b.Property<byte>("NbPlacesDispo")
                        .HasColumnType("tinyint")
                        .HasColumnName("nbPlacesDispo");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("statut");

                    b.Property<string>("Systeme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("systeme");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("titre");

                    b.Property<string>("UrlImage")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("urlImage");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit")
                        .HasColumnName("visible");

                    b.Property<string>("Vtt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("vtt");

                    b.HasKey("PartieId");

                    b.HasIndex("MeneurId");

                    b.ToTable("Partie", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<byte>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("roleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("RoleId"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("libelle");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Seance", b =>
                {
                    b.Property<long>("SeanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seanceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SeanceId"));

                    b.Property<DateTime>("Debut")
                        .HasColumnType("datetime")
                        .HasColumnName("debut");

                    b.Property<DateTime?>("Fin")
                        .HasColumnType("datetime")
                        .HasColumnName("fin");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("libelle");

                    b.Property<long>("PartieId")
                        .HasColumnType("bigint")
                        .HasColumnName("partieID");

                    b.HasKey("SeanceId")
                        .HasName("seanceID");

                    b.HasIndex("PartieId");

                    b.ToTable("Seance", (string)null);
                });

            modelBuilder.Entity("JoueurPartie", b =>
                {
                    b.Property<long>("JoueurId")
                        .HasColumnType("bigint")
                        .HasColumnName("joueurID");

                    b.Property<long>("PartieId")
                        .HasColumnType("bigint")
                        .HasColumnName("partieID");

                    b.HasKey("JoueurId", "PartieId");

                    b.HasIndex("PartieId");

                    b.ToTable("JoueurPartie", (string)null);
                });

            modelBuilder.Entity("JoueurRole", b =>
                {
                    b.Property<long>("JoueurId")
                        .HasColumnType("bigint")
                        .HasColumnName("joueurID");

                    b.Property<byte>("RoleId")
                        .HasColumnType("tinyint")
                        .HasColumnName("roleID");

                    b.HasKey("JoueurId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("JoueurRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PartieGenre", b =>
                {
                    b.Property<long>("PartieId")
                        .HasColumnType("bigint")
                        .HasColumnName("partieID");

                    b.Property<short>("GenreId")
                        .HasColumnType("smallint")
                        .HasColumnName("genreID");

                    b.HasKey("PartieId", "GenreId")
                        .HasName("PK_Appartenir");

                    b.HasIndex("GenreId");

                    b.ToTable("PartieGenre", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Campagne", b =>
                {
                    b.HasOne("Domain.Entities.Partie", "Partie")
                        .WithOne("Campagne")
                        .HasForeignKey("Domain.Entities.Campagne", "PartieId")
                        .IsRequired();

                    b.Navigation("Partie");
                });

            modelBuilder.Entity("Domain.Entities.Oneshot", b =>
                {
                    b.HasOne("Domain.Entities.Partie", "Partie")
                        .WithOne("Oneshot")
                        .HasForeignKey("Domain.Entities.Oneshot", "PartieId")
                        .IsRequired();

                    b.Navigation("Partie");
                });

            modelBuilder.Entity("Domain.Entities.Partie", b =>
                {
                    b.HasOne("Domain.Entities.Joueur", "Meneur")
                        .WithMany("PartiesNavigation")
                        .HasForeignKey("MeneurId")
                        .IsRequired();

                    b.Navigation("Meneur");
                });

            modelBuilder.Entity("Domain.Entities.Seance", b =>
                {
                    b.HasOne("Domain.Entities.Partie", "Partie")
                        .WithMany("Seances")
                        .HasForeignKey("PartieId")
                        .IsRequired();

                    b.Navigation("Partie");
                });

            modelBuilder.Entity("JoueurPartie", b =>
                {
                    b.HasOne("Domain.Entities.Joueur", null)
                        .WithMany()
                        .HasForeignKey("JoueurId")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Partie", null)
                        .WithMany()
                        .HasForeignKey("PartieId")
                        .IsRequired();
                });

            modelBuilder.Entity("JoueurRole", b =>
                {
                    b.HasOne("Domain.Entities.Joueur", null)
                        .WithMany()
                        .HasForeignKey("JoueurId")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartieGenre", b =>
                {
                    b.HasOne("Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Partie", null)
                        .WithMany()
                        .HasForeignKey("PartieId")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Joueur", b =>
                {
                    b.Navigation("PartiesNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Partie", b =>
                {
                    b.Navigation("Campagne");

                    b.Navigation("Oneshot");

                    b.Navigation("Seances");
                });
#pragma warning restore 612, 618
        }
    }
}
